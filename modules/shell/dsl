#!/bin/sh

deploy_initialize()
{
  command_exists rsync ||
    error "rsync is required in order to use the deploy extension, "\
    "please install rsync before continuing\n"\
    "  sm rsync package install"

  variable_is_nonempty repository_url ||
    error "The project's repository_url must be set in configuration files (eg: ~/.smrc)"

  true \
    ${discard_path:="${shared_path}/discard"} \
    ${previous_path:="${project_path}/previous"} \
    ${stage_path:="${project_path}/stage"} \
    ${deploy_log_path:="${shared_path}/log/deploy"} \
    ${_hooks_flag:=1}

  ensure_paths_exist "$previous_path" "$discard_path" "$deploy_log_path"

  previous_releases=$(
    find "${previous_path}/" -mindepth 1 -maxdepth 1 -type d | sort
  )

  previous="${previous_releases[0]}"

  old_releases=($(
    find "${previous_path}/" -mindepth 1 -maxdepth 1 -type d | sort -r |
    awk "NR > ${keep_releases:-3} { print \$0 }"
  ))

  timestamp="$(date +%m.%d.%YT%H:%M:%S)"

  deploy_steps=(
    update_repository stage_current configure symlink
    release cleanup record
  )
}

hook()
{
  local _hook="$1"

  (( _hooks_flag )) || return 0

  # System
  if file_is_nonempty "$shared_path/deploy/$_hook"
  then
    log_step "shared path ~ ${_hook}" \
      hook_source "$shared_path/deploy/$_hook"
  fi

  # System, Environment specific
  if variable_is_nonempty environment &&
    file_is_executable "$shared_path/deploy/#{$environment}/${_hook}"
  then
    log_step "shared ${environment} path ~ ${_hook}" \
      hook_source "$shared_path/deploy/#{$environment}/${_hook}"
  fi

  # Project
  if path_exists "$shared_path/$project" &&
    file_is_executable "$shared_path/$project/config/deploy/${_hook}"
  then
    log_step "${project} ~ ${_hook}" \
      hook_source "$shared_path/$project/config/deploy/${_hook}"
  fi

  # Project, environment
  if variable_is_nonempty environment &&
    file_is_executable "$shared_path/$project/config/deploy/$environment/${_hook}"
  then
    log_step "${project} ${environment} ~ ${_hook}" \
      hook_source "$shared_path/$project/config/deploy/$environment/${_hook}"
  fi
}

hook_source()
{
  local _file="$1"
  ( source_files "${_file}")
}

before_step()
{
  if path_exists "${release_path}"
  then # If release path already exists, use it
    enter "$release_path"
  fi
  local _name="$1"
  shift
  hook "before_${_name}" "$@"
}

after_step()
{
  local _name="$1"
  shift
  hook "after_${_name}" "$@"
}

update()
{
  update_repository && release
}

update_repository()
{
  log_step "Downloading ${project} repository changes" \
    fetch_uri "$repository_url" "$shared_path/$project" "${branch:-}"

  enter "${shared_path}/${project}"


  log_todo "  **** move revision handling to fetch_uri ****"

  case "${scm_type}" in
    git|github)
      if file_exists ".gitmodules"
      then
        log_step "Updating submodules" \
        git submodule init 2>/dev/null && git submodule update
      fi

      if [[ -n "$revision" ]]
      then
        log_step "Checking out revision '$revision'." \
          git checkout $revision >/dev/null 2>&1
      else
        revision=$( git log --no-color -1 | awk '/commit/{print $2}')
        revision=${revision:0:7}
      fi

      [[ -n "${branch}" ]] ||
        branch=$( git branch --no-color | awk '/^\* /{print $2}')
      ;;

    hg)
      if [[ -n "$revision" ]]
      then
        # TODO: Find out if this is how it's done for hg ;)
        log_step "Checking out revision '$revision'." \
        hg update $branch $revision
      else
        log_step "Updating branch '$branch'." \
          hg update $branch
      fi
      ;;

    svn)
      (( revision > 0 )) || return 0

      log_step "Checking out revision $revision" \
        svn checkout -r $revision
      ;;
  esac

}

stage_current()
{
  log_step "Staging ${project} ${branch:-} ${revision:-} (${stage_path})" \
    rsync -ag --exclude=".${scm_type}/" "${shared_path}/${project}/" "${stage_path}"

  enter "$stage_path"

  ensure_paths_exist "$stage_path/public"
}

fail_stage_current()
{
  log "Removing release from $stage_path"
  if path_exists "${stage_path}"
  then
    remove_paths "${stage_path}"
  fi
}

release()
{
  local _prefix="${shared_path%/*}"

  if path_exists "$release_path"
  then
    log_step "Moving asside previous release (${release_path#${_prefix}} => ${project_path#${_prefix}}/previous/$timestamp)" \
      mv "$release_path" "$project_path/previous/$timestamp"
  fi

  log_step "Releasing to ${release_path#${_prefix}} (${release_path#${_prefix}} => ${stage_path#${_prefix}})" \
    mv "$stage_path" "$release_path"

  enter "$release_path"
}

fail_release()
{
  log_todo "should \$previous == \$timestamp ?"
  if path_exists "$previous"
  then
    log_step "Move current release to $discard_path/$timestamp ..." \
      mv "$release_path" "$discard_path/$timestamp"

    log_step "Roll back to previous release $previous ..." \
      mv "$previous" "${release_path%/}"
  else
    log "No previous releases to revert to."
  fi
}

configure()
{
  local _name _file

  if ! path_exists "$shared_path/config"
  then
    log "No shared config path found, skipping shared configuration."
    return 0
  fi

  ensure_paths_exist "$stage_path/config"

  enter "${shared_path}/config"

  for _file in "$shared_path"/config/*
  do
    _name="${_file##*/}"

    log_step "Linking ${_name} (shared/config/${_name} => stage/config/${_name})" \
      link --force "$shared_path/config/${_name}" "$stage_path/config/${_name}"
  done
}

symlink()
{
  local _path _paths _prefix="${shared_path%/*}" \
    _shared_public_path="${shared_path}/public"

  for _path in tmp log pids files
  do
    log_step "Linking ${_path} (shared/${_path} => stage/${_path})" \
      link --force "${shared_path}/${_path}" to "${stage_path}/${_path}"
  done

  path_exists "$shared_path/public/" ||
    error "\nPlease run the folloing command first and then retry:\n\tsm rails setup"

  _paths=($( find "${shared_path}/public" -mindepth 1 -maxdepth 1 -type d ))

  for _path in "${_paths[@]}"
  do
    _path="${_path#${_shared_public_path}/}"

    log_step "Linking path ${_path} (shared/public/${_path} => stage/public/${_path})" \
      link --force "${_shared_public_path}/${_path}" to "${stage_path}/public/${_path}"
  done
}

remove_releases()
{
  local _release
  while (( $# > 0 ))
  do
    _release="${1}"
    shift
    log_step "Removing old release ${_release}" remove_paths "${_release}"
  done
}

cleanup()
{
  path_exists "$project_path/previous" || return 0 # No old releases
  array_is_nonempty old_releases       || return 0 # No old releases

  enter "${project_path}/previous"
  remove_releases "${old_releases[@]}" ||
    log "There was an error removing old releases."
}

record()
{ # TODO: What else could we record that would be useful?
  path_exists "${release_path}" || return 0 # Release failed, nothing to do...

  [[ -z "${revision:-}" ]] ||
    write "${revision}" to "${release_path}/revision"

  [[ -z "${branch:-}" ]] ||
    write "${branch}" to "${release_path}/branch"

  [[ -z "${repository_url}" ]] || # TODO: get this from .uri file.
    write "$repository_url" to "${release_path}/repository_url"
}

run_deploy()
{
  trap trace_filter RETURN
  trace_filter deploy

  # Logging (http://nakedape.cc/wiki/ShellHacks 1.6.1, 1.7, 1.11)
  export log_file="${deploy_log_path}/${timestamp}.log"
  exec 3>>"${log_file}"
  exec &> >(tee -a "${log_file}")
  # Error handling
  trap revert_on_error ERR

  # This will run any deploy hooks that are called
  #   (by hook file name)
  # Hooks are sourced into a subshell IF they are executable.
  # This means that users may disable hooks by changing their
  # execute bit.
  #
  command_exists rsync ||
    error "The 'rsync' command was not found, please install rsync before using deploy."\
      "(Note that there is an rsync extension in the networking extension set)\n"\
      "root# sm rsync package install"

  step deploy

  log "  Deploy started at ${timestamp} and completed at $(date +%m.%d.%YT%H:%M:%S)"
}

deploy()
{
  steps "${deploy_steps[@]}"
}

revert_on_error()
{
  local status=$?
  backtrace "A command has returned an not handled error code (${status})." no_exit 2>&3
  log "\nAn error occured, reverting...\n  for details check deploy.$timestamp.log\n" >&2
  retreat >&2
  kill -s USR2 $APP_PID #to exit application not current subshell
}

revert()
{
  log "  reverting ..."
  retreat "deploy" "${deploy_steps[@]}"
}

