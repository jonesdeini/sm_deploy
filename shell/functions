#!/bin/sh

hook()
{
  local _hook="$1"

  (( _hooks_flag )) || return 0

  # System
  if ! files are empty "$shared_path/deploy/$_hook"
  then
    log_step "shared path ~ ${_hook}"
    hook_source "$shared_path/deploy/$_hook" >> "${deploy_log_path}/${_hook}" 2>&1
    log_step success
  fi

  # System, Environment specific
  if [[ -n "${environment}" ]] &&
    files are executable "$shared_path/deploy/#{$environment}/${_hook}"
  then
    log_step "shared ${environment} path ~ ${_hook}"
    hook_source "$shared_path/deploy/#{$environment}/${_hook}" >> "${deploy_log_path}/${_hook}" 2>&1
    log_step success
  fi

  # Project
  if paths exist "$shared_path/$project" &&
    files are executable "$shared_path/$project/config/deploy/${_hook}"
  then
    log_step "${project} ~ ${_hook}"
    hook_source "$shared_path/$project/config/deploy/${_hook}" >> "${deploy_log_path}/${_hook}" 2>&1
    log_step success
  fi

  # Project, environment
  if [[ -n "${environment}" ]] &&
    files are executable "$shared_path/$project/config/deploy/$environment/${_hook}"
  then
    log_step "${project} ${environment} ~ ${_hook}"
    hook_source "$shared_path/$project/config/deploy/$environment/${_hook}" >> "${deploy_log_path}/${_hook}" 2>&1
    log_step success
  fi
}

hook_source()
{
  local _file="$1"
  ( files source "${_file}" )
}

before_step()
{
  local _name="$1"
  shift
  hook "before_${_name}" "$@"
}

after_step()
{
  local _name="$1"
  shift
  hook "after_${_name}" "$@"
}

update()
{
  update_repository && release
}

update_repository()
{
  log_step "Downloading ${project} repository changes"
  fetch_uri "$repository_url" "$shared_path/$project" "${branch:-}"
  log_step success

  paths enter "${shared_path}/${project}"

  log_todo "  **** move revision handling to fetch_uri ****"

  case "${scm_type}" in
    git|github)
      if files exists ".gitmodules"
      then
        log_step "Updating submodules" \
        git submodule init 2>/dev/null && git submodule update
      fi

      if [[ -n "$revision" ]]
      then
        log_step "Checking out revision '$revision'." \
          git checkout $revision >/dev/null 2>&1
      else
        revision=$( git log --no-color -1 | awk '/commit/{print $2}')
        revision=${revision:0:7}
      fi

      [[ -n "${branch}" ]] ||
        branch=$( git branch --no-color | awk '/^\* /{print $2}')
      ;;

    hg)
      if [[ -n "$revision" ]]
      then
        # TODO: Find out if this is how it's done for hg ;)
        log_step "Checking out revision '$revision'." \
        hg update $branch $revision
      else
        log_step "Updating branch '$branch'." \
          hg update $branch
      fi
      ;;

    svn)
      (( revision > 0 )) || return 0

      log_step "Checking out revision $revision" \
        svn checkout -r $revision
      ;;
  esac

}

stage_release()
{
  log_step "Staging ${project} ${branch:-} ${revision:-} (${stage_path})" \
    rsync -ag --exclude=".${scm_type}/" "${shared_path}/${project}/" "${stage_path}"

  paths enter "$stage_path"

  paths create "$stage_path/public"
}

fail_stage_release()
{
  if paths exist "${stage_path}"
  then
    log_step "Removing release from $stage_path" \
      paths remove "${stage_path}"
  fi
}

release()
{
  local _prefix="${shared_path%/*}"

  # if paths exist "$release_path"
  # then
  #   log_step "Moving asside previous release (${release_path#${_prefix}} => ${project_path#${_prefix}}/previous/$timestamp)" \
  #     mv "$release_path" "$project_path/previous/$timestamp"
  # fi

  log_step "Releasing ${project} ${version}"
  #TODO: version detection failed !!!
  versionedfs add \
    path "${project_path}" \
    name "${project}" \
    version ${version:=$(date +"%Y-%m-%dT%H:%M:%S")} \
    source "$stage_path"
  versionedfs activate \
    path "${project_path}" \
    name "${project}" \
    version ${version:=$(date +"%Y-%m-%dT%H:%M:%S")}
  paths remove "$stage_path"
  log_step success
  paths enter "$release_path"
}

fail_release()
{
  if paths exist "$stage_path"
  then
    log_step "Discarding current stage to $discard_path/$timestamp" \
      mv "$stage_path" "$discard_path/$timestamp"
  fi

  paths exist "$initial_release" || return 0

  paths create "$discard_path" "$deploy_log_path"

  # TODO: versionedfs last # switch to last version
  log_step "Rolling back to previous release $previous" \
    mv "$previous" "${release_path%/}"
#  else
#    log "No previous releases to revert to."
#  fi
}

configure()
{
  local _name _file

  if ! paths exist "$shared_path/config"
  then
    log "No shared config path found, skipping shared configuration."
    return 0
  fi

  paths create "$stage_path/config"

  paths enter "${shared_path}/config"

  for _file in "$shared_path"/config/*
  do
    _name="${_file##*/}"

    log_step "Linking ${_name} ($shared_path/config/${_name} => $stage_path/config/${_name})" \
      files link symbolic force from "$shared_path/config/${_name}" to "$stage_path/config/${_name}"
  done
}

configure_db()
{
  local _name _file

  if ! paths exist "$shared_path/db"
  then
    log "No shared/db path found, skipping shared/db."
    return 0
  fi

  log_step "Linking db path (shared/db => stage/db)" \
    files link symbolic force from "$shared_path/db" to "$stage_path/db"
}


symlink()
{
  local _path _paths _prefix="${shared_path%/*}" \
    _shared_public_path="${shared_path}/public"

  for _path in tmp log pids #files
  do
    if paths exist "${stage_path}/${_path}"
    then
      log_step "Removing stage/${_path})" \
        paths remove "${stage_path}/${_path}"
    fi
    log_step "Linking ${_path} (shared/${_path} => stage/${_path})" \
      files link symbolic force from "${shared_path}/${_path}" to "${stage_path}/${_path}"
  done

  paths exist "$shared_path/public/" ||
    error "\nPlease run the folloing command first and then retry:\n\tsm rails setup"

  _paths=($( find "${shared_path}/public" -mindepth 1 -maxdepth 1 -type d ))

  for _path in "${_paths[@]}"
  do
    _path="${_path#${_shared_public_path}/}"

    log_step "Linking path ${_path} (shared/public/${_path} => stage/public/${_path})" \
      files link symbolic force from "${_shared_public_path}/${_path}" to "${stage_path}/public/${_path}"
  done
}

remove_releases()
{
  local _release
  while (( $# > 0 ))
  do
    _release="${1}"
    shift
    log_step "Removing old release ${_release}" \
      paths remove "${_release}"
  done
}

cleanup()
{
  paths exist "$project_path/previous" || return 0 # No old releases
  array is nonempty old_releases       || return 0 # No old releases

  paths enter "${project_path}/previous"
  remove_releases "${old_releases[@]}" ||
    log "There was an error removing old releases."
}

record()
{ # TODO: What else could we record that would be useful?
  paths exist "${release_path}" || return 0 # Release failed, nothing to do...

  [[ -z "${revision:-}" ]] ||
    files write string "${revision}" to "${release_path}/revision"

  [[ -z "${branch:-}" ]] ||
    files write string "${branch}" to "${release_path}/branch"

  [[ -z "${repository_url}" ]] || # TODO: get this from .uri file.
    files write string "$repository_url" to "${release_path}/repository_url"
}

do_deploy()
{
  # Logging (http://nakedape.cc/wiki/ShellHacks 1.6.1, 1.7, 1.11)
  export log_file="${deploy_log_path}/deploy.log"
  exec 3>>"${log_file}"
  exec &> >(tee -a "${log_file}")
  # Error handling
  trap revert_on_error ERR

  # This will run any deploy hooks that are called
  #   (by hook file name)
  # Hooks are sourced into a subshell IF they are executable.
  # This means that users may disable hooks by changing their
  # execute bit.
  #
  command exists rsync ||
    error "The 'rsync' command was not found, please install rsync before using deploy."\
      "(Note that there is an rsync extension in the networking extension set)\n"\
      "root# sm sets install networking ; sm rsync package install"

  if paths exist "${release_path}"
  then # If release path already exists, start inside it.
    paths enter "$release_path"
  fi

  step deploy

  log "  Deploy started at ${timestamp} and completed at $(date +%m.%d.%YT%H:%M:%S)"
}

deploy()
{
  local _step
  for _step in "${deploy_steps[@]}"
  do
    #step "${deploy_steps[@]}" >> "${deploy_log_path}/${_hook}" 2>&1
    step "${_step}" 2>&3
    #step "${_step}" >> "${deploy_log_path}/${_step}" 2>&1
  done
}

revert_on_error()
{
  trap "backtrace \"An errorr occured while reverting.\"" ERR
  local status=$?
  backtrace "A command has returned an not handled error code (${status})." no_exit 2>&3
  log "\nAn error occured, reverting...\n  for details check deploy.$timestamp.log\n" >&2
  retreat >&2
  kill -s USR2 $APP_PID #to exit application not current subshell
}

revert()
{
  retreat
}

do_revert()
{
  log "  Reverting ..."
  retreat "deploy" "${deploy_steps[@]}"
}

